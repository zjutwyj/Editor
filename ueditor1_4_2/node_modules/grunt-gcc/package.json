{
  "name": "grunt-gcc",
  "description": "Minify JavaScript files with Google Closure Compiler.",
  "version": "0.2.2",
  "homepage": "https://github.com/Darsain/grunt-gcc",
  "author": {
    "name": "Darsain",
    "url": "http://darsa.in"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Darsain/grunt-gcc.git"
  },
  "bugs": {
    "url": "https://github.com/Darsain/grunt-gcc/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "gcc": "1.x"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-tagrelease": "~0.2.0",
    "grunt-bumpup": "~0.2.0",
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-gcc\n\n[Grunt](http://gruntjs.com/) task for minifying JavaScript files with Google Closure Compiler.\n\nFor grunt 0.3, install the latest `0.1.x` version. Grunt 0.4 support starts with version `0.2.0`.\n\n## Installation\n\n```\nnpm install grunt-gcc\n```\n\nAdd to `grunt.js`:\n\n```js\ngrunt.loadNpmTasks('grunt-gcc');\n```\n\n`initConfig` task:\n\n```js\ngcc: {\n\tdist: {\n\t\tsrc: ['src/foo.js', 'src/bar.js'],\n\t\tdest: 'dist/foobar.min.js'\n\t}\n}\n```\n\n## Options\n\nYou can pass options with:\n\n```js\ngcc: {\n\tdist: {\n\t\toptions: {\n\t\t\tcompilation_level: 'ADVANCED_OPTIMIZATIONS'\n\t\t},\n\t\tsrc: ['src/foo.js', 'src/bar.js'],\n\t\tdest: 'dist/foobar.min.js'\n\t}\n}\n```\n\n---\n\n### compilation_level:\n\n- `WHITESPACE_ONLY` : Removes comments, line breaks, unnecessary spaces, and other whitespace.\n- `SIMPLE_OPTIMIZATIONS` *default* : Previous plus shortens local variables, function names, and function parameters.\n- `ADVANCED_OPTIMIZATIONS` : Previous but also for global variables, function names, and function parameters.\n\nFor more specific explanation, visit the [Closure Compiler Compilation Levels documentation](https://developers.google.com/closure/compiler/docs/compilation_levels).\n\n---\n\n### banner:\n\nText banner that will be inserted at the beginning of minified file.\n\n```js\ngcc: {\n\tdist: {\n\t\toptions: {\n\t\t\tbanner: '<%= meta.banner %>'\n\t\t},\n\t\tsrc: 'src/foo.js',\n\t\tdest: 'dist/foobar.min.js'\n\t}\n}\n```\n\n---\n\n### create_source_map:\n\nPass a path to a source map if you want to create one. The target directory for sourcemap has to exist.\n\n```js\ngcc: {\n\tdist: {\n\t\toptions: {\n\t\t\tcreate_source_map: 'dist/foo.min.js.map'\n\t\t},\n\t\tsrc: 'src/foo.js',\n\t\tdest: 'dist/foo.min.js'\n\t}\n}\n```\n\n---\n\n#### Rest of the Closure Compiler options as defined in --help\n\n```\n --charset VAL                          : Input and output charset for all\n                                          files. By default, we accept UTF-8 as\n                                          input and output US_ASCII\n --compilation_level [WHITESPACE_ONLY   : Specifies the compilation level to\n | SIMPLE_OPTIMIZATIONS | ADVANCED_OPTI : use. Options: WHITESPACE_ONLY,\n MIZATIONS]                             : SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZ\n                                          ATIONS\n --compute_phase_ordering               : Runs the compile job many times, then\n                                          prints out the best phase ordering\n                                          from this run\n --create_name_map_files                : If true, variable renaming and\n                                          property renaming map files will be\n                                          produced as {binary name}_vars_map.out\n                                          and {binary name}_props_map.out. Note\n                                          that this flag cannot be used in\n                                          conjunction with either variable_map_o\n                                          utput_file or property_map_output_file\n --create_source_map VAL                : If specified, a source map file\n                                          mapping the generated source files\n                                          back to the original source file will\n                                          be output to the specified path. The\n                                          %outname% placeholder will expand to\n                                          the name of the output file that the\n                                          source map corresponds to.\n --debug                                : Enable debugging options\n --define (--D, -D) VAL                 : Override the value of a variable\n                                          annotated @define. The format is\n                                          <name>[=<val>], where <name> is the\n                                          name of a @define variable and <val>\n                                          is a boolean, number, or a single-quot\n                                          ed string that contains no single\n                                          quotes. If [=<val>] is omitted, the\n                                          variable is marked true\n --externs VAL                          : The file containing javascript\n                                          externs. You may specify multiple\n --formatting [PRETTY_PRINT | PRINT_INP : Specifies which formatting options,\n UT_DELIMITER]                          : if any, should be applied to the\n                                          output JS. Options: PRETTY_PRINT,\n                                          PRINT_INPUT_DELIMITER\n --help                                 : Displays this message\n --js VAL                               : The javascript filename. You may\n                                          specify multiple\n --js_output_file VAL                   : Primary output filename. If not\n                                          specified, output is written to stdout\n --jscomp_dev_mode (--dev_mode) [OFF |  : Turns on extra sanity checks\n START | START_AND_END | EVERY_PASS]    :\n --jscomp_error VAL                     : Make the named class of warnings an\n                                          error. Options:accessControls,\n                                          checkRegExp,checkTypes, checkVars,\n                                          deprecated, fileoverviewTags,\n                                          invalidCasts, missingProperties,\n                                          nonStandardJsDocs, strictModuleDepChec\n                                          k, undefinedVars, unknownDefines,\n                                          visibility\n --jscomp_off VAL                       : Turn off the named class of warnings.\n                                          Options:accessControls, checkRegExp,ch\n                                          eckTypes, checkVars, deprecated,\n                                          fileoverviewTags, invalidCasts,\n                                          missingProperties, nonStandardJsDocs,\n                                          strictModuleDepCheck, undefinedVars,\n                                          unknownDefines, visibility\n --jscomp_warning VAL                   : Make the named class of warnings a\n                                          normal warning. Options:accessControls\n                                          , checkRegExp,checkTypes, checkVars,\n                                          deprecated, fileoverviewTags,\n                                          invalidCasts, missingProperties,\n                                          nonStandardJsDocs, strictModuleDepChec\n                                          k, undefinedVars, unknownDefines,\n                                          visibility\n --logging_level VAL                    : The logging level (standard java.util.\n                                          logging.Level values) for Compiler\n                                          progress. Does not control errors or\n                                          warnings for the JavaScript code\n                                          under compilation\n --manage_closure_dependencies          : Automatically sort dependencies so\n                                          that a file that goog.provides symbol\n                                          X will always come before a file that\n                                          goog.requires symbol X. If an input\n                                          provides symbols, and those symbols\n                                          are never required, then that input\n                                          will not be included in the compilatio\n                                          n.\n --module VAL                           : A javascript module specification.\n                                          The format is <name>:<num-js-files>[:[\n                                          <dep>,...][:]]]. Module names must be\n                                          unique. Each dep is the name of a\n                                          module that this module depends on.\n                                          Modules must be listed in dependency\n                                          order, and js source files must be\n                                          listed in the corresponding order.\n                                          Where --module flags occur in\n                                          relation to --js flags is unimportant\n --module_output_path_prefix VAL        : Prefix for filenames of compiled js\n                                          modules. <module-name>.js will be\n                                          appended to this prefix. Directories\n                                          will be created as needed. Use with\n                                          --module\n --module_wrapper VAL                   : An output wrapper for a javascript\n                                          module (optional). The format is\n                                          <name>:<wrapper>. The module name\n                                          must correspond with a module\n                                          specified using --module. The wrapper\n                                          must contain %s as the code placeholde\n                                          r\n --output_manifest VAL                  : Prints out a list of all the files in\n                                          the compilation. If --manage_closure_d\n                                          ependencies is on, this will not\n                                          include files that got dropped\n                                          because they were not required. The\n                                          %outname% placeholder expands to the\n                                          js output file. If you're using\n                                          modularization, using %outname% will\n                                          create a manifest for each module.\n --output_wrapper VAL                   : Interpolate output into this string\n                                          at the place denoted by the marker\n                                          token %output%. See --output_wrapper_m\n                                          arker\n --output_wrapper_marker VAL            : Use this token as output marker in\n                                          the value of --output_wrapper\n --print_ast                            : Prints a dot file describing the\n                                          internal abstract syntax tree and\n                                          exits\n --print_pass_graph                     : Prints a dot file describing the\n                                          passes that will get run and exits\n --print_tree                           : Prints out the parse tree and exits\n --process_closure_primitives           : Processes built-ins from the Closure\n                                          library, such as goog.require(),\n                                          goog.provide(), and goog.exportSymbol(\n                                          )\n --property_map_input_file VAL          : File containing the serialized\n                                          version of the property renaming map\n                                          produced by a previous compilation\n --property_map_output_file VAL         : File where the serialized version of\n                                          the property renaming map produced\n                                          should be saved\n --summary_detail_level N               : Controls how detailed the compilation\n                                          summary is. Values: 0 (never print\n                                          summary), 1 (print summary only if\n                                          there are errors or warnings), 2\n                                          (print summary if type checking is\n                                          on, see --check_types), 3 (always\n                                          print summary). The default level is 1\n --third_party                          : Check source validity but do not\n                                          enforce Closure style rules and\n                                          conventions\n --use_only_custom_externs              : Specifies whether the default externs\n                                          should be excluded\n --variable_map_input_file VAL          : File containing the serialized\n                                          version of the variable renaming map\n                                          produced by a previous compilation\n --variable_map_output_file VAL         : File where the serialized version of\n                                          the variable renaming map produced\n                                          should be saved\n --version                              : Prints the compiler version to stderr.\n --warning_level [QUIET | DEFAULT |     : Specifies the warning level to use.\n VERBOSE]                               : Options: QUIET, DEFAULT, VERBOSE\n```\n\nIn options that do not accept value, just pass `true` instead. Also with options that accept multiple values, pass\nthe values in an array to that option:\n\n```js\ngcc: {\n\tdist: {\n\t\toptions: {\n\t\t\tdebug: true, // Simple flag without input value\n\t\t\texterns: [   // Multiple values\n\t\t\t\t'jquery.js',\n\t\t\t\t'underscore.js'\n\t\t\t]\n\t\t},\n\t\tsrc: ...,\n\t\tdest: ...\n\t}\n}\n```",
  "readmeFilename": "README.md",
  "_id": "grunt-gcc@0.2.2",
  "dist": {
    "shasum": "0f17791ee0ab50d8d35372d282391c58dc14622c"
  },
  "_from": "grunt-gcc@~0.2.2",
  "_resolved": "https://registry.npmjs.org/grunt-gcc/-/grunt-gcc-0.2.2.tgz"
}
